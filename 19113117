import heapq


def heuristic(node, goal):
    # Calculate the row and column coordinates for the current node and the goal node
    node_row, node_col = divmod(node - 1, 9)
    goal_row, goal_col = divmod(goal - 1, 9)

    # Calculate the Euclidean distance between the current node and the goal node
    return ((goal_row - node_row) ** 2 + (goal_col - node_col) ** 2) ** 0.5


def astar_search(start, goal, graph, rubbish_bins, carrying_capacity, strength_limit):
    # Initialize the open list and closed set
    open_list = []
    closed_set = set()

    # Create a dictionary to store the cost from the start node to each node
    g_scores = {start: 0}

    # Create a dictionary to store the estimated total cost from the start node to the goal node
    f_scores = {start: heuristic(start, goal)}

    # Add the start node to the open list
    heapq.heappush(open_list, (f_scores[start], start))

    # Create a dictionary to store the path
    path = {start: None}

    while open_list:
        # Get the node with the lowest f_score from the open list
        current_node = heapq.heappop(open_list)[1]

        # Check if the current node is the goal node
        if current_node == goal:
            # Reconstruct the path from the goal node to the start node
            final_path = []
            while current_node:
                final_path.append(current_node)
                current_node = path[current_node]
            return final_path[::-1]  # Reverse the path to get it from start to goal

        # Add the current node to the closed set
        closed_set.add(current_node)

        # Explore the neighbors of the current node
        for neighbor in graph[current_node]:
            # Calculate the tentative g_score for the neighbor
            g_score = g_scores[current_node] + 1

            # Check if the neighbor is in the closed set and the g_score is higher
            if neighbor in closed_set and g_score >= g_scores.get(neighbor, float('inf')):
                continue

            # Check if the neighbor is not in the open list or the g_score is lower
            if g_score < g_scores.get(neighbor, float('inf')):
                # Update the g_score for the neighbor
                g_scores[neighbor] = g_score

                # Update the f_score for the neighbor
                f_scores[neighbor] = g_score + heuristic(neighbor, goal)

                # Add the neighbor to the open list
                heapq.heappush(open_list, (f_scores[neighbor], neighbor))

                # Update the path
                path[neighbor] = current_node

    # No path found
    return None


# Define the graph
graph = {
    1: [2, 10, 11],
    2: [1, 3, 11],
    3: [2, 4, 11, 12, 13],
    4: [3, 5, 13],
    5: [4, 6, 13, 14, 15],
    6: [5, 7, 15],
    7: [6, 8, 15, 16, 17],
    8: [7, 9, 17],
    9: [8, 17, 18],
    10: [1, 11, 19, 20],
    11: [1, 2, 3, 10, 12, 20],
    12: [3, 11, 13, 20, 21, 22],
    13: [3, 4, 5, 12, 14, 22],
    14: [5, 13, 15, 22, 23, 24],
    15: [5, 6, 7, 14, 16, 24],
    16: [7, 15, 17, 24, 25, 26],
    17: [7, 8, 9, 16, 18, 26],
    18: [9, 17, 26, 27],
    19: [10, 20, 28, 29],
    20: [10, 11, 12, 19, 21, 29],
    21: [12, 20, 22, 29, 30, 31],
    22: [12, 13, 14, 21, 23, 31],
    23: [14, 22, 24, 31, 32, 33],
    24: [14, 15, 16, 23, 25, 33],
    25: [16, 24, 26, 33, 34, 35],
    26: [16, 17, 18, 25, 27, 35],
    27: [18, 26, 35, 36],
    28: [19, 29, 37, 38],
    29: [19, 20, 21, 28, 30, 38],
    30: [21, 29, 31, 38, 39, 40],
    31: [21, 22, 23, 30, 32, 40],
    32: [23, 31, 33, 40, 41, 42],
    33: [23, 24, 25, 32, 34, 42],
    34: [25, 33, 35, 42, 43, 44],
    35: [25, 26, 27, 34, 36, 44],
    36: [27, 35, 44, 45],
    37: [28, 38, 46, 47],
    38: [28, 29, 30, 37, 39, 47],
    39: [30, 38, 40, 47, 48, 49],
    40: [30, 31, 32, 39, 41, 49],
    41: [32, 40, 42, 49, 50, 51],
    42: [32, 33, 34, 41, 43, 51],
    43: [34, 42, 44, 51, 52, 53],
    44: [34, 35, 36, 43, 45, 53],
    45: [36, 44, 53, 54],
    46: [37, 47],
    47: [37, 38, 39, 46, 48],
    48: [39, 47, 49],
    49: [39, 40, 41, 48, 50],
    50: [41, 49, 51],
    51: [41, 42, 43, 50, 52],
    52: [43, 51, 53],
    53: [43, 44, 45, 52, 54],
    54: [45, 53]
}

# Define the rubbish bin locations and weights
rubbish_bins = {
    8: (30, 1),
    13: (5, 1),
    16: (10, 2),
    18: (10, 3),
    21: (5, 1),
    23: (10, 2),
    29: (30, 3),
    35: (20, 2),
    40: (5, 3),
    41: (20, 1),
    43: (5, 2),
    46: (10, 1)
}

# Define the entry point and disposal rooms
entry_point = 1
disposal_rooms = [6, 48, 54]

# Define the carrying capacity and strength limit
carrying_capacity = 5
strength_limit = 40

# Find the path to clear all the rubbish bins
paths = []
current_position = entry_point
current_weight = 0
current_volume = 0

while rubbish_bins:
    # Find the nearest rubbish bin
    nearest_bin = min(rubbish_bins, key=lambda x: heuristic(current_position, x))

    # Find the path to the nearest bin
    bin_path = astar_search(current_position, nearest_bin, graph, rubbish_bins, carrying_capacity, strength_limit)

    if bin_path:
        # Check if the current position is a disposal room
        if current_position in disposal_rooms:
            # Clear the rubbish bin in the disposal room
            del rubbish_bins[nearest_bin]
            current_weight = 0
            current_volume = 0
            current_position = nearest_bin
            paths.append(bin_path)
        else:
            # Check if the rubbish bin can be moved to the nearest bin
            bin_weight, bin_volume = rubbish_bins[nearest_bin]
            if (
                current_weight + bin_weight <= strength_limit
                and current_volume + bin_volume <= carrying_capacity
            ):
                # Move the rubbish bin to the nearest bin
                current_weight += bin_weight
                current_volume += bin_volume
                current_position = nearest_bin
            else:
                # Empty the rubbish bin in the disposal room
                current_position = disposal_rooms[0]  # Assuming disposal room is always available
                current_weight = 0
                current_volume = 0
    else:
        # No path found to any remaining rubbish bin
        break

print("Paths:")
for i, path in enumerate(paths):
    print("Path", i + 1, ":", path)

if not rubbish_bins:
    print("All the rubbish has been cleared.")
else:
    print("Some rubbish bins were not cleared.")


if not rubbish:
    print("All the rubbish has been cleared.")
else:
    print("Some rubbish were not cleared.")
